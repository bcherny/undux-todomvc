/// <reference types="react" />
import * as React from 'react';
import { Store, StoreDefinition } from './';
export declare type Diff<T extends string, U extends string> = ({
    [P in T]: P;
} & {
    [P in U]: never;
} & {
    [x: string]: never;
})[T];
export declare type Omit<T, K extends keyof T> = {
    [P in Diff<keyof T, K>]: T[P];
};
export declare function connect<Actions extends object>(store: StoreDefinition<Actions>): <Props, PropsWithStore extends {
    store: Store<Actions>;
} & Props = {
    store: Store<Actions>;
} & Props>(Component: React.ComponentType<PropsWithStore>) => React.ComponentClass<Omit<PropsWithStore, "store">>;
