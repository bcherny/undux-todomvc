// @flow strict
import * as React from 'react'
import type { Observable } from 'rxjs'
export type Undux<Actions: {}> = $ObjMap<Actions, Hash>

type Hash = <K, V>(value: V, key: K) => {
  key: K,
  previousValue: V,
  value: V
}

export interface Store<Actions: {}> {
  get<K: $Keys<Actions>>(key: K): $ElementType<Actions, K>;
  set<K: $Keys<Actions>>(key: K): (value: $ElementType<Actions, K>) => void;
  on<K: $Keys<Actions>>(key: K): Observable<$ElementType<Actions, K>>;
  onAll<K: $Keys<Actions>>(): Observable<$Values<Undux<Actions>>>;
  before<K: $Keys<Actions>>(key: K): Observable<$ElementType<Actions, K>>;
  beforeAll<K: $Keys<Actions>>(): Observable<$Values<Undux<Actions>>>;
}

declare export class StoreSnapshot<Actions: {}> implements Store<Actions> {
  get<K: $Keys<Actions>>(key: K): $ElementType<Actions, K>;
  set<K: $Keys<Actions>>(key: K): (value: $ElementType<Actions, K>) => void;
  on<K: $Keys<Actions>>(key: K): Observable<$ElementType<Actions, K>>;
  onAll<K: $Keys<Actions>>(): Observable<$Values<Undux<Actions>>>;
  before<K: $Keys<Actions>>(key: K): Observable<$ElementType<Actions, K>>;
  beforeAll<K: $Keys<Actions>>(): Observable<$Values<Undux<Actions>>>;
}

declare export class StoreDefinition<Actions: {}> implements Store<Actions> {
  get<K: $Keys<Actions>>(key: K): $ElementType<Actions, K>;
  set<K: $Keys<Actions>>(key: K): (value: $ElementType<Actions, K>) => void;
  on<K: $Keys<Actions>>(key: K): Observable<$ElementType<Actions, K>>;
  onAll<K: $Keys<Actions>>(): Observable<$Values<Undux<Actions>>>;
  before<K: $Keys<Actions>>(key: K): Observable<$ElementType<Actions, K>>;
  beforeAll<K: $Keys<Actions>>(): Observable<$Values<Undux<Actions>>>;
}

declare export function createStore<Actions: {}>(initialState: Actions): StoreDefinition<Actions>
export type Plugin<Actions: {}> = (store: StoreDefinition<Actions>) => StoreDefinition<Actions>
declare export var withLogger: Plugin<*>

declare export function connect<Actions: {}>(
  store: StoreDefinition<Actions>
): <
  Props,
  PropsWithStore: ({ store: Store<Actions> } & Props)
>(Component: React.ComponentType<PropsWithStore>) => Class<React.Component<$Diff<Props, { store: Store<Actions> }>>>
